// Include the Contact Record ID property in the "Property to include in code" section 
// The Leads API is basically identical to the Contacts API if you need to make any changes 
const axios = require('axios');
const secret = 

exports.main = async (event, callback) => {
  const contactId = event.inputFields['hs_object_id'];

  if (!contactId) {
    console.log('Contact ID is missing.');
    return callback({ outputFields: { message: 'Contact ID is missing.' } });
  }

  try {
    const searchPayload = {
      filterGroups: [{
        filters: [{
          propertyName: 'hs_primary_contact_id',
          operator: 'EQ',
          value: contactId
        }]
      }],
      sorts: [{
        propertyName: 'hs_lastmodifieddate', // Sorting by last modified date
        direction: 'DESCENDING'
      }],
      properties: ['hs_lead_name', 'hs_lastmodifieddate'], // Including leadname and lastmodifieddate in the properties to be returned
    };

    const response = await axios({
      method: 'post',
      url: `https://api.hubapi.com/crm/v3/objects/leads/search`,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.YOUR_SECRET}`
      },
      data: searchPayload
    });

    if (response.data.total > 0) {
      console.log(`Found ${response.data.total} leads associated with contact ${contactId}.`);

      // Assuming the first result is the most recently updated lead due to DESCENDING sort
      const mostRecentLeadId = response.data.results[0].id;

      // Iterate over all found leads, skip the first (most recent), and delete the rest
      for (let i = 1; i < response.data.results.length; i++) { // Start from index 1 to skip the most recent lead
        const leadId = response.data.results[i].id;
        try {
          await axios({
            method: 'delete',
            url: `https://api.hubapi.com/crm/v3/objects/leads/${leadId}`,
            headers: {
              'Authorization': `Bearer ${process.env.YOUR_SECRET}`,
              'Content-Type': 'application/json'
            }
          });
          console.log(`Deleted lead ${leadId}`);
        } catch (error) {
          console.error(`Error deleting lead ${leadId}:`, error);
        }
      }

      console.log(`Kept only the most recently updated lead with ID: ${mostRecentLeadId}`);
    } else {
      console.log('No leads found for this contact.');
    }
  } catch (error) {
    console.error(`An error occurred while searching for and deleting leads: ${error}`);
    return callback({ outputFields: { message: 'An error occurred while searching for and deleting leads.' } });
  }
};
